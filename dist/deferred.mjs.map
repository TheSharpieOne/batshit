{"version":3,"file":"deferred.mjs","sources":["../src/deferred.ts"],"sourcesContent":["/**\n * A deffered value that can be resolved at a later time outside of its closure.\n * @generic T - value of the deffered\n */\nexport type Deferred<T> = {\n    resolve: (value: T | PromiseLike<T>) => void\n    reject: (reason?: any) => void\n    value: Promise<T>\n}\n\n/**\n * Create a new Deffered\n *\n * @generic T - value of the deffered\n * @returns Deferred<T>\n */\nexport const deferred = <T>(): Deferred<T> => {\n    let resolve!: Deferred<T>['resolve']\n    let reject!: Deferred<T>['reject']\n\n    const value = new Promise<T>((_resolve, _reject) => {\n        resolve = _resolve\n        reject = _reject\n    })\n\n    return {\n        resolve,\n        reject,\n        value,\n    }\n}\n\n/**\n * Type guard for Deffered values.\n *\n * @generic T - value of the deffered\n * @param value any\n * @returns value is Deferred<T>\n */\nexport const isDeferred = <T>(value: any): value is Deferred<T> =>\n    typeof value === 'object' &&\n    value !== null &&\n    'resolve' in value &&\n    'reject' in value &&\n    'value' in value &&\n    'then' in value.value"],"names":[],"mappings":"AAUA;;;;;AAKG;AACI,MAAM,QAAQ,GAAG,MAAqB;AACzC,IAAA,IAAI,OAAgC,CAAA;AACpC,IAAA,IAAI,MAA8B,CAAA;IAElC,MAAM,KAAK,GAAG,IAAI,OAAO,CAAI,CAAC,QAAQ,EAAE,OAAO,KAAI;QAC/C,OAAO,GAAG,QAAQ,CAAA;QAClB,MAAM,GAAG,OAAO,CAAA;AACpB,KAAC,CAAC,CAAA;IAEF,OAAO;QACH,OAAO;QACP,MAAM;QACN,KAAK;KACR,CAAA;AACL;;;;"}