{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { deferred } from \"./deferred\"\n\n/**\n * Batcher.\n * A batch manager that will batch requests for a certain data type within a given window.\n * \n * @generic T - The type of the data.\n * @generic Q - item query type\n */\nexport type Batcher<T, Q> = {\n  /**\n   * Schedule a get request for a query.\n   * \n   * @generic T - The type of the data.\n   * @generic Q - item query type\n   * @param query Q\n   * @returns Promise<T>\n   */\n  fetch: (query: Q) => Promise<T>\n}\n\n/**\n * Config needed to create a Batcher\n * \n * @generic T - The type of the data.\n * @generic Q - item query type\n */\nexport type BatcherConfig<T, Q> = {\n  /**\n   * The function that makes the batched request for the current batch queries\n   * \n   * @param queries Q[]\n   * @returns Promise<T[]\n   */\n  fetcher: (queries: Q[]) => Promise<T[]>\n  /**\n   * The scheduling function.\n   */\n  scheduler?: BatcherScheduler\n  /**\n   * Correlate an item by its query. Used to extract the correct value from the batch of items\n   * to the correct query used to fetch it.\n   * \n   * @param query Q\n   * @returns string\n   */\n  equality: keyof T | ((item:T, query: Q) => boolean)\n}\n\n/**\n * A function to schedule batch execution timing\n */\nexport type BatcherScheduler = {\n  /**\n   * A scheduler function.\n   * \n   * @param start number - time stamp when the current batch started queuing fetches.\n   * @param latest number - time stamp of the latest queued fetch.\n   * @returns number - the number of ms to wait from latest queued fetch until executing batchh fetch call.\n   */\n  (start: number, latest: number): number\n}\n\n/**\n * Create a batch manager for a given collection of a data type.\n * Will batch all .get calls given inside a scheduled time window into a singel request.\n * \n * @generic T - The type of the data.\n * @generic Q - item query type\n * @param config BatcherConfig<T, Q>\n * @returns Batcher<T, Q>\n */\nexport const create = <T, Q>(config: BatcherConfig<T, Q>): Batcher<T, Q> => {\n  let batch = new Set<Q>()\n  let currentRequest = deferred<T[]>()\n  let timer: NodeJS.Timeout | undefined = undefined\n  let start: number | null = null\n  let latest: number | null = null\n\n  const scheduler: BatcherScheduler = config.scheduler ?? windowScheduler(10)\n  const equality = typeof config.equality == \"function\" ? config.equality : keyEquality(config.equality)\n\n  const fetch = (query: Q): Promise<T> => {\n    batch.add(query)\n    clearTimeout(timer)\n\n    if (!start) start = Date.now()\n    latest = Date.now()\n\n    timer = setTimeout(() => {\n      const req = config.fetcher([...batch])\n      const _currentRequest = currentRequest\n      req.then(data => {\n        _currentRequest.resolve(data)\n      })\n      batch = new Set()\n      currentRequest = deferred<T[]>()\n      timer = undefined\n      start = null\n      latest = null\n    }, scheduler(start, latest))\n\n    return currentRequest.value.then(data => data.find(item => equality(item, query)) as T)\n  }\n\n  return { fetch }\n}\n\n/**\n * Create a euquality check to check if the query matches a given key on the item data.\n * \n * @param key keyof T\n * @returns (item:T, query: Q) => boolean\n */\nexport const keyEquality = <T, Q>(key: keyof T) => (item:T, query: Q) => \n  item[key] === query\n\n/**\n * Give a window in ms where all queued fetched made within the window will be batched into\n * one singler batch fetch call.\n * \n * @param ms number\n * @returns BatcherScheduler\n */\nexport const windowScheduler: (ms: number) => BatcherScheduler = (ms) => (start, latest) => {\n  const spent = latest - start\n  return ms - spent\n}\n\n/**\n * Give a buffer time in ms. Will give another buffer window when queueing a fetch.\n * \n * @param ms number\n * @returns BatcherScheduler\n */\nexport const bufferScheduler: (ms: number) => BatcherScheduler = (ms) => () => {\n  return ms\n}"],"names":["deferred"],"mappings":";;;;AA+DA;;;;;;;;AAQG;AACU,MAAA,MAAM,GAAG,CAAO,MAA2B,KAAmB;AACzE,IAAA,IAAI,KAAK,GAAG,IAAI,GAAG,EAAK,CAAA;AACxB,IAAA,IAAI,cAAc,GAAGA,iBAAQ,EAAO,CAAA;IACpC,IAAI,KAAK,GAA+B,SAAS,CAAA;IACjD,IAAI,KAAK,GAAkB,IAAI,CAAA;IAC/B,IAAI,MAAM,GAAkB,IAAI,CAAA;IAEhC,MAAM,SAAS,GAAqB,MAAM,CAAC,SAAS,IAAI,eAAe,CAAC,EAAE,CAAC,CAAA;IAC3E,MAAM,QAAQ,GAAG,OAAO,MAAM,CAAC,QAAQ,IAAI,UAAU,GAAG,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;AAEtG,IAAA,MAAM,KAAK,GAAG,CAAC,KAAQ,KAAgB;AACrC,QAAA,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAChB,YAAY,CAAC,KAAK,CAAC,CAAA;AAEnB,QAAA,IAAI,CAAC,KAAK;AAAE,YAAA,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;AAC9B,QAAA,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;AAEnB,QAAA,KAAK,GAAG,UAAU,CAAC,MAAK;YACtB,MAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAA;YACtC,MAAM,eAAe,GAAG,cAAc,CAAA;AACtC,YAAA,GAAG,CAAC,IAAI,CAAC,IAAI,IAAG;AACd,gBAAA,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;AAC/B,aAAC,CAAC,CAAA;AACF,YAAA,KAAK,GAAG,IAAI,GAAG,EAAE,CAAA;YACjB,cAAc,GAAGA,iBAAQ,EAAO,CAAA;YAChC,KAAK,GAAG,SAAS,CAAA;YACjB,KAAK,GAAG,IAAI,CAAA;YACZ,MAAM,GAAG,IAAI,CAAA;SACd,EAAE,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAA;QAE5B,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAM,CAAC,CAAA;AACzF,KAAC,CAAA;IAED,OAAO,EAAE,KAAK,EAAE,CAAA;AAClB,EAAC;AAED;;;;;AAKG;MACU,WAAW,GAAG,CAAO,GAAY,KAAK,CAAC,IAAM,EAAE,KAAQ,KAClE,IAAI,CAAC,GAAG,CAAC,KAAK,MAAK;AAErB;;;;;;AAMG;AACI,MAAM,eAAe,GAAqC,CAAC,EAAE,KAAK,CAAC,KAAK,EAAE,MAAM,KAAI;AACzF,IAAA,MAAM,KAAK,GAAG,MAAM,GAAG,KAAK,CAAA;IAC5B,OAAO,EAAE,GAAG,KAAK,CAAA;AACnB,EAAC;AAED;;;;;AAKG;AACU,MAAA,eAAe,GAAqC,CAAC,EAAE,KAAK,MAAK;AAC5E,IAAA,OAAO,EAAE,CAAA;AACX;;;;;;;"}